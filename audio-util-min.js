var AudioUtil=(function(){function _AudioUtil(option){if(!(this instanceof _AudioUtil)){throw'必须通过new关键字实例化对象！';}option=option||{};let config={keep:option.keep||false,authority:option.authority||false,inputSampleRate:option.inputSampleRate||48000,inputSampleBits:option.inputSampleBits||16,outputSampleRate:option.outputSampleRate||16000,outputSampleBits:option.outputSampleBits||16,};let mediaRecorder;const audioData={blobs:[],buffer:[],size:0,clear(){this.blobs=[];this.buffer=[];this.size=0}};this.version='2.0';this.ondataavailable=option.ondataavailable||function(){};this.onstop=option.onstop||function(){};this.getAuthority=function(){navigator.mediaDevices.getUserMedia({audio:true}).then(stream=>{mediaRecorder=new MediaRecorder(stream);mediaRecorder.ondataavailable=event=>{if(event.data.size>0){audioData.blobs.push(event.data)}this.ondataavailable(event)};mediaRecorder.onstop=async()=>{this.onstop(await this.getBase64())}}).catch(e=>{console.error('获取权限失败')})};if(config.authority){this.getAuthority()}this.mergeBuffer=async function(buffer1,buffer2){const audioContext=new(window.AudioContext||window.webkitAudioContext)();const length=buffer1.length+buffer2.length;const mergedBuffer=audioContext.createBuffer(1,length,buffer1.sampleRate);const channelData=mergedBuffer.getChannelData(0);channelData.set(buffer1.getChannelData(0),0);channelData.set(buffer2.getChannelData(0),buffer1.length);return mergedBuffer};this.mergeBlobToBuffer=async function(blob1,blob2){let buffer1=await this.getBuffer(blob1);let buffer2=await this.getBuffer(blob2);return await this.mergeBuffer(buffer1,buffer2)};this.mergeBlobArray=async function(array){array=array||audioData.blobs;if(array.length==1)return array[0];let buffer=await this.getBuffer(array[0]);for(let i=1;i<array.length;i++){let bufferTp=await this.getBuffer(array[i]);buffer=await this.mergeBuffer(buffer,bufferTp)}return await this.getWavBlob(buffer)};this.getBuffer=async function(blob){const audioContext=new AudioContext();let mergeBlob=blob||await this.mergeBlobArray();let readerBuffer=await this.readerBuffer(mergeBlob);let audioBuffer=await audioContext.decodeAudioData(readerBuffer);return audioBuffer};this.getWavBlob=async function(bf){let buffer=bf||await this.getBuffer();audioData.buffer=buffer.getChannelData(0);let wavBlob=this.audioHandle.toWavBlob();return wavBlob};this.getBase64=async function(blob){let wavBlob=blob||await this.getWavBlob();let base64=await this.readerBase64(wavBlob);return{base64:base64,length:wavBlob.size}};this.start=function(){if(!config.keep){audioData.clear()}mediaRecorder.start()};this.stop=function(){mediaRecorder.stop()};let playOldTime=0;this.play=function(){if(new Date().getTime()<=playOldTime)return;let audioContext=new AudioContext();this.getBuffer().then(buffer=>{playOldTime=new Date().getTime()+(buffer.duration*1000);let source=audioContext.createBufferSource();source.buffer=buffer;source.connect(audioContext.destination);source.start()})};this.ajax=function(conf){let xhr=new XMLHttpRequest();xhr.onloadend=function(){if(!conf.success)return;conf.success(xhr.responseText,xhr)};xhr.onerror=function(){if(!conf.error)return;conf.error(xhr)};xhr.open(conf.type?conf.type:'GET',conf.url);for(let key in conf.headers){xhr.setRequestHeader(key,conf.headers[key])}xhr.send(conf.data)};this.readerBuffer=async function(blob){return this.readerBlob(blob,'buffer')};this.readerBase64=async function(blob){return this.readerBlob(blob,'base64')};this.readerBlob=async function(blob,type){return new Promise((resolve,reject)=>{let reader=new FileReader();reader.onloadend=()=>{resolve(reader.result)};if(type=='buffer'){reader.readAsArrayBuffer(blob)}else if(type=='base64'){reader.readAsDataURL(blob)}})};this.audioHandle={compress(buffer){buffer=buffer||audioData.buffer;let compression=parseInt(config.inputSampleRate/config.outputSampleRate);let length=buffer.length/compression;let result=new Float32Array(length);let index=0,j=0;while(index<length){result[index]=buffer[j];j+=compression;index++}return result},toWavBlob(bytes){let sampleRate=Math.min(config.inputSampleRate,config.outputSampleRate);let sampleBits=Math.min(config.inputSampleBits,config.outputSampleBits);bytes=bytes||this.compress();let dataLength=bytes.length*(sampleBits/8);let buffer=new ArrayBuffer(44+dataLength);let data=new DataView(buffer);let channelCount=1;let offset=0;let writeString=function(str){for(let i=0;i<str.length;i++){data.setUint8(offset+i,str.charCodeAt(i))}};writeString('RIFF');offset+=4;data.setUint32(offset,36+dataLength,true);offset+=4;writeString('WAVE');offset+=4;writeString('fmt ');offset+=4;data.setUint32(offset,16,true);offset+=4;data.setUint16(offset,1,true);offset+=2;data.setUint16(offset,channelCount,true);offset+=2;data.setUint32(offset,sampleRate,true);offset+=4;data.setUint32(offset,channelCount*sampleRate*(sampleBits/8),true);offset+=4;data.setUint16(offset,channelCount*(sampleBits/8),true);offset+=2;data.setUint16(offset,sampleBits,true);offset+=2;writeString('data');offset+=4;data.setUint32(offset,dataLength,true);offset+=4;if(sampleBits===8){for(let i=0;i<bytes.length;i++,offset++){let s=Math.max(-1,Math.min(1,bytes[i]));let val=s<0?s*0x8000:s*0x7FFF;val=parseInt(255/(65535/(val+32768)));data.setInt8(offset,val,true)}}else{for(let i=0;i<bytes.length;i++,offset+=2){let s=Math.max(-1,Math.min(1,bytes[i]));data.setInt16(offset,s<0?s*0x8000:s*0x7FFF,true)}}return new Blob([data],{type:'audio/wav'})}}}return _AudioUtil})();
